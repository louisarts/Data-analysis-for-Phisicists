# PROBABILITY RELATIONS TASK 1

# input values
p_AP = input("chance of having antibodies (decimal): ")
p_AN = input("chance of not having antibodies (decimal): ")
p_APP = input("chance of true positive (decimal): ")
p_APN = input("chance of false positive (decimal): ")
p_ANN = input("chance of true negative (decimal): ")
p_ANP = input("chance of false negative (decimal): ")

# calculation of chance

# chance of testing positive (regardless of having antibodies)

p_P = (float(p_AN) * float(p_ANP)) + (float(p_AP) * float(p_APP))

# chance of having antibodies, being tested positive for them (in %)

final_val = ((float(p_APP) * float(p_AP)) / float(p_P)) * 100.0

print("chance of having the antibodies, and testing positive:", final_val, "%")

# PROBABILITY RELATIONS FOLLOW UP TASK

#p_AP_new is the frac of ppl that have the antibodies in order for p_P to be bigger than 50%

p_AP_new = (0.5 - (float(p_AN) * float(p_ANP))) / float(p_APP)

print ("fraction of ppl to have antibodies:", (p_AP_new * 100), "%")


# Graphical representation

import matplotlib.pyplot as plt 
import numpy as np
  
# x - coordinates 
x = np.arange(0, 1, 0.1) 
# y - coordinates 
y = (x) * 0.99 + 0.099
  
# potting the points 
plt.plot(x, y) 
  
# name the axis
plt.xlabel("chance of having antibodies (decimal)")
plt.ylabel("chance of being positively tested (decimal)")

#showing the graph
plt.show()

# PROBABILITY DISTRIBUTIONS (2 tasks together on each graph)


#just some library imports 
import matplotlib.pyplot as plt
from IPython.display import Math, Latex
from IPython.core.display import Image
import seaborn as sns
sns.set(color_codes=True)
sns.set(rc={'figure.figsize':(5,5)})

# gaussian distribution:

from scipy.stats import norm

data_normal = norm.rvs(size=1000,loc=4
                       ,scale=1)

ax = sns.distplot(data_normal,
                  kde=True,
                  bins=100,
                  color='blue',
                  hist_kws={"linewidth": 20,'alpha':0.1})


ax.set(xlabel='Gaussian Distribution', ylabel='probability', xlim=(0,10))

# Binomial distribultion

from scipy.stats import binom
data_binom = binom.rvs(n=10,p=0.5,size=1000,loc=0.5)

ax = sns.distplot(data_binom,
                  kde=True,
                  color='blue',
                  hist_kws={"linewidth": 20,'alpha':0.1})
ax.set(xlabel='Binomial Distribution', ylabel='probability', xlim=(0,10))

# poisson distribution

from scipy.stats import poisson
data_poisson = poisson.rvs(mu=3, size=1000)

ax = sns.distplot(data_poisson,
                  bins=30,
                  kde=True,
                  color='blue',
                  hist_kws={"linewidth": 15,'alpha':1})

ax.set(xlabel="poisson distribution", ylabel="probability", xlim=(0,10))

# exponantial distribution

from scipy.stats import expon
data_expon = expon.rvs(scale=1,loc=1
                       ,size=1000)

ax = sns.distplot(data_expon,
                  kde=True,
                  bins=100,
                  color='blue',
                  hist_kws={"linewidth": 20,'alpha':0.1})
ax.set(xlabel="exponential distribution", ylabel="probability", xlim=(0,10))
