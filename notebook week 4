{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled10.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyObAZ8eSA5WDETf+Oqb13G/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/louisarts/Data-analysis-for-Phisicists/blob/master/notebook%20week%204\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1CiSr3enkUi6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "THE CHI SQUARED TEST"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HreibwnBWUB8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "29f394e8-5724-4a46-dca6-937a00950d5e"
      },
      "source": [
        "# coordinate generator for 10% chance of miss hit\n",
        "import random\n",
        "\n",
        "# list of coordinates that correspond to a 45° angle with x and y axis\n",
        "coordinates = []\n",
        "starting = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]]\n",
        "# for each next Z, x can go up 1, down 1 or stay the same\n",
        "# for each next Z, y gan go up 1, down 1 or stay the same\n",
        "# loop 7 times to have 8 coordinates in total\n",
        "for i in range(8):\n",
        "    # get random number from 0 to 1\n",
        "    rand = random.random()\n",
        "    point = starting[i]\n",
        "# added in precentages for miss hit\n",
        "    # p(x=0 y=1): 10%\n",
        "    if (rand < 0.1):\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=1): 10%\n",
        "    elif (rand < 0.2):\n",
        "        point[0] -= 1\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=0): 10%\n",
        "    elif (rand < 0.3):\n",
        "        point[0] -= 1\n",
        "    # p(x=-1 y=-1): 10%\n",
        "    elif (rand < 0.4):\n",
        "        point[0] -= 1\n",
        "        point[1] -= 1\n",
        "    # p(x=0 y=-1): 10%\n",
        "    elif (rand < 0.5):\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=-1): 10%\n",
        "    elif (rand < 0.6):\n",
        "        point[0] += 1\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=0): 10%\n",
        "    elif (rand < 0.7):\n",
        "        point[0] += 1\n",
        "    # p(x=1 y=1): 30% #chance of correct hit to total 100% of hit\n",
        "    else:\n",
        "        point[0] += 1\n",
        "        point[1] += 1\n",
        "\n",
        "    # add next point to our coordinates list\n",
        "    new_point = [point[0], point[1]]\n",
        "    coordinates.append(new_point)\n",
        "\n",
        "# print all coordinates\n",
        "print('experimantal Coordinates:')\n",
        "for c in coordinates:\n",
        "    print(c)\n",
        "\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "experimantal Coordinates:\n",
            "[-1, -1]\n",
            "[0, 0]\n",
            "[3, 2]\n",
            "[4, 3]\n",
            "[5, 5]\n",
            "[6, 5]\n",
            "[6, 7]\n",
            "[8, 7]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2gaoz00DjhsQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "b5a4a09c-7100-4a37-9831-77fd72516e08"
      },
      "source": [
        "# coordinate generator for 5% chance of miss hit\n",
        "\n",
        "import random\n",
        "\n",
        "# list of coordinates that correspond to a 45° angle with x and y axis\n",
        "coordinates = []\n",
        "starting = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]]\n",
        "# for each next Z, x can go up 1, down 1 or stay the same\n",
        "# for each next Z, y gan go up 1, down 1 or stay the same\n",
        "# loop 7 times to have 8 coordinates in total\n",
        "for i in range(8):\n",
        "    # get random number from 0 to 1\n",
        "    rand = random.random()\n",
        "    point = starting[i]\n",
        "# added in precentages for miss hit\n",
        "    # p(x=0 y=1): 5%\n",
        "    if (rand < 0.05):\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=1): 5%\n",
        "    elif (rand < 0.1):\n",
        "        point[0] -= 1\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=0): 5%\n",
        "    elif (rand < 0.15):\n",
        "        point[0] -= 1\n",
        "    # p(x=-1 y=-1): 5%\n",
        "    elif (rand < 0.2):\n",
        "        point[0] -= 1\n",
        "        point[1] -= 1\n",
        "    # p(x=0 y=-1): 5%\n",
        "    elif (rand < 0.25):\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=-1): 5%\n",
        "    elif (rand < 0.3):\n",
        "        point[0] += 1\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=0): 5%\n",
        "    elif (rand < 0.35):\n",
        "        point[0] += 1\n",
        "    # p(x=1 y=1): 65% # chance of correct hit to total 100% chance of hit\n",
        "    else:\n",
        "        point[0] += 1\n",
        "        point[1] += 1\n",
        "\n",
        "    # add next point to our coordinates list\n",
        "    new_point = [point[0], point[1]]\n",
        "    coordinates.append(new_point)\n",
        "\n",
        "# print all coordinates\n",
        "print('experimantal Coordinates:')\n",
        "for c in coordinates:\n",
        "    print(c)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "experimantal Coordinates:\n",
            "[1, 0]\n",
            "[2, 2]\n",
            "[1, 2]\n",
            "[4, 4]\n",
            "[5, 5]\n",
            "[6, 6]\n",
            "[7, 7]\n",
            "[6, 7]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UtMyIkP3Tn_e",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "outputId": "ebca2f74-2c48-4bab-b1ab-48f63fa3f4b0"
      },
      "source": [
        "# inputs for observed x values (output from previous code)\n",
        "x_1 = int(input(\"x1 = \"))\n",
        "x_2 = int(input(\"x2 = \"))\n",
        "x_3 = int(input(\"x3 = \"))\n",
        "x_4 = int(input(\"x4 = \"))\n",
        "x_5 = int(input(\"x5 = \"))\n",
        "x_6 = int(input(\"x6 = \"))\n",
        "x_7 = int(input(\"x7 = \"))\n",
        "x_8 = int(input(\"x8 = \"))\n",
        "# inputs for observed y values (output from previous code)\n",
        "y_1 = int(input(\"y1 = \"))\n",
        "y_2 = int(input(\"y2 = \"))\n",
        "y_3 = int(input(\"y3 = \"))\n",
        "y_4 = int(input(\"y4 = \"))\n",
        "y_5 = int(input(\"y5 = \"))\n",
        "y_6 = int(input(\"y6 = \"))\n",
        "y_7 = int(input(\"y7 = \"))\n",
        "y_8 = int(input(\"y8 = \"))\n",
        "\n",
        "# the error is the width of a cell (1), so can be ignored in further calculations\n",
        "# Calculations of A,B,C,D and E\n",
        "A = y_1 + y_2 + y_3 + y_4 + y_5 + y_6 + y_7 + y_8\n",
        "B = 8 # 8 times the error\n",
        "C = x_1 + x_2 + x_3 + x_4 + x_5 + x_6 + x_7 + x_8\n",
        "D = y_1**2 + y_2**2 + y_3**2 + y_4**2 + y_5**2 + y_6**2 + y_7**2 + y_8**2\n",
        "E = x_1**2 + x_2**2 + x_3**2 + x_4**2 + x_5**2 + x_6**2 + x_7**2 + x_8**2\n",
        "\n",
        "# calculation of a and b\n",
        "a = (E*B - C*A)/(D*B - A**2)\n",
        "b = (D*C - E*A)/(D*B - A**2)\n",
        "\n",
        "# calculation of chi squared\n",
        "S = ((x_1 - a*y_1 - b)**2) + ((x_2 - a*y_2 - b)**2) + ((x_3 - a*y_3 - b)**2) + ((x_4 - a*y_4 - b)**2) + ((x_5 - a*y_5 - b)**2) + ((x_6 - a*y_6 - b)**2) + ((x_7 - a*y_7 - b)**2) + ((x_8 - a*y_8 - b)**2) \n",
        "\n",
        "print (\"S = \", S)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x1 = 1\n",
            "x2 = 2\n",
            "x3 = 1\n",
            "x4 = 4\n",
            "x5 = 5\n",
            "x6 = 6\n",
            "x7 = 7\n",
            "x8 = 6\n",
            "y1 = 0\n",
            "y2 = 2\n",
            "y3 = 2\n",
            "y4 = 4\n",
            "y5 = 5\n",
            "y6 = 6\n",
            "y7 = 7\n",
            "y8 = 7\n",
            "S =  3.135999999999999\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZXocEC6eLgAM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "cb1833eb-a9c2-4dab-903b-bd7b8bdf01ed"
      },
      "source": [
        "#distribution of chi squared values\n",
        "import matplotlib.pyplot as plt\n",
        "# 30 chi squared values were calculated by manually inputting abserved data for different runs of 10% chance of miss hit\n",
        "x = [23.5, 3.0, 21.6, 5.1, 9.5, 12.4, 11.7, 5.2, 14.1, 20.1, 10.1, 11.6, 7.7, 13.2, 3.2, 25.2, 5.1, 4.9, 4.2, 7.2, 4.8, 9.0, 17.2, 7.6, 9.6, 7.2, 7.2, 16.5, 21.3, 7.5]\n",
        "plt.hist(x, bins = 25) #25 shows a good enough representation of data\n",
        "plt.show()"
      ],
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t_eChgDor_pG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "572782e9-6f53-4f06-c721-7a3f972b3534"
      },
      "source": [
        "#distribution of chi squared values\n",
        "import matplotlib.pyplot as plt\n",
        "# 30 chi squared values were calculated by manually inputting abserved data for different runs of 5% chance of miss hit\n",
        "x = [3.1, 0, 17.0, 0.6, 4.9, 24.6, 17.6, 7.8, 2.2, 9.2, 3.4, 3.5, 5.8, 8.9, 5.6, 0.7, 13.1, 1.8, 0, 3.2, 7.5, 0, 4.6, 13.0, 12.5, 1.6, 4.1, 1.2, 13.5, 1.6]\n",
        "plt.hist(x, bins = 25)\n",
        "plt.show()"
      ],
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LhjgVTOavpzC",
        "colab_type": "text"
      },
      "source": [
        "We can see from these 2 plots, that the chi squared values are distributed more towards bigger numbers in the 10% miss hit plot compared to the 5% miss hit plot. This shows, what can be expected, the bigger the chance of a miss hit, the larger the chi squared value and therefore the more the observed differs from the expected values, and the larger the error in a single track."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y8L6Jbu2ke-X",
        "colab_type": "text"
      },
      "source": [
        "DID OUR TRACKS COME FROM THE SAME PLACE?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_FQRpX1P8cg_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "df442651-c432-4e71-f20f-ba4016d7daf5"
      },
      "source": [
        "# coordinate generator for 10% chance of miss hit\n",
        "import random\n",
        "\n",
        "# list of coordinates that correspond to a 45° angle with x and y axis\n",
        "coordinates = []\n",
        "starting = [[5, 0], [6, 1], [7, 2], [8, 3], [9, 4], [10, 5], [11, 6], [12, 7]] # particle now comes from a different location (I assumed it comes from a location 5 pixels from the right of the origial origin)\n",
        "# for each next Z, x can go up 1, down 1 or stay the same\n",
        "# for each next Z, y gan go up 1, down 1 or stay the same\n",
        "# loop 7 times to have 8 coordinates in total\n",
        "for i in range(8):\n",
        "    # get random number from 0 to 1\n",
        "    rand = random.random()\n",
        "    point = starting[i]\n",
        "# added in precentages for miss hit\n",
        "    # p(x=0 y=1): 10%\n",
        "    if (rand < 0.1):\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=1): 10%\n",
        "    elif (rand < 0.2):\n",
        "        point[0] -= 1\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=0): 10%\n",
        "    elif (rand < 0.3):\n",
        "        point[0] -= 1\n",
        "    # p(x=-1 y=-1): 10%\n",
        "    elif (rand < 0.4):\n",
        "        point[0] -= 1\n",
        "        point[1] -= 1\n",
        "    # p(x=0 y=-1): 10%\n",
        "    elif (rand < 0.5):\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=-1): 10%\n",
        "    elif (rand < 0.6):\n",
        "        point[0] += 1\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=0): 10%\n",
        "    elif (rand < 0.7):\n",
        "        point[0] += 1\n",
        "    # p(x=1 y=1): 30% #chance of correct hit to total 100% of hit\n",
        "    else:\n",
        "        point[0] += 1\n",
        "        point[1] += 1\n",
        "\n",
        "    # add next point to our coordinates list\n",
        "    new_point = [point[0], point[1]]\n",
        "    coordinates.append(new_point)\n",
        "\n",
        "# print all coordinates\n",
        "print('experimantal Coordinates:')\n",
        "for c in coordinates:\n",
        "    print(c)"
      ],
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "experimantal Coordinates:\n",
            "[6, 1]\n",
            "[5, 0]\n",
            "[6, 1]\n",
            "[7, 3]\n",
            "[10, 3]\n",
            "[9, 6]\n",
            "[10, 5]\n",
            "[13, 8]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iyy0Ypm89LUT",
        "colab_type": "text"
      },
      "source": [
        "The following 3 particle tracks were generated with the first code: \n",
        "\n",
        "(1,0)(1,2)(2,3)(3,2)(5,4)(6,5)(5,5)(8,7)\n",
        "\n",
        "(0,1)(2,1)(3,3)(2,3)(3,5)(4,4)(7,7)(8,8)\n",
        "\n",
        "(1,1)(1,0)(3,3)(3,4)(5,5)(7,6)(7,7)(6,7)\n",
        "\n",
        "The following particle track was generated with the code above, where the expected origin was placed 5 pixels to the right, compared to the first 3 particles:\n",
        "\n",
        "(5,1)(5,0)(6,1)(7,3)(10,3)(9,6)(10,5)(13,8)\n",
        "\n",
        "Point of closest approach for these 4 candidates:\n",
        "\n",
        "(8,6) This point was chosen because it is a coordinate that is has at least one coordinate of each line above at least 1 coordinate away. This coordinate was then takes as the new origin and a track was generated below:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2xSFgusWjLBx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "1c2dfb08-ff1a-4eb8-823e-6fa68629d91b"
      },
      "source": [
        "# coordinate generator for 10% chance of miss hit\n",
        "import random\n",
        "\n",
        "# list of coordinates that correspond to a 45° angle with x and y axis\n",
        "coordinates = []\n",
        "starting = [[8, 6], [9, 7], [10, 8], [11, 9], [12, 10], [13, 11], [14, 12], [15, 13]] # particle now comes from new origin\n",
        "# for each next Z, x can go up 1, down 1 or stay the same\n",
        "# for each next Z, y gan go up 1, down 1 or stay the same\n",
        "# loop 7 times to have 8 coordinates in total\n",
        "for i in range(8):\n",
        "    # get random number from 0 to 1\n",
        "    rand = random.random()\n",
        "    point = starting[i]\n",
        "# added in precentages for miss hit\n",
        "    # p(x=0 y=1): 10%\n",
        "    if (rand < 0.1):\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=1): 10%\n",
        "    elif (rand < 0.2):\n",
        "        point[0] -= 1\n",
        "        point[1] += 1\n",
        "    # p(x=-1 y=0): 10%\n",
        "    elif (rand < 0.3):\n",
        "        point[0] -= 1\n",
        "    # p(x=-1 y=-1): 10%\n",
        "    elif (rand < 0.4):\n",
        "        point[0] -= 1\n",
        "        point[1] -= 1\n",
        "    # p(x=0 y=-1): 10%\n",
        "    elif (rand < 0.5):\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=-1): 10%\n",
        "    elif (rand < 0.6):\n",
        "        point[0] += 1\n",
        "        point[1] -= 1\n",
        "    # p(x=1 y=0): 10%\n",
        "    elif (rand < 0.7):\n",
        "        point[0] += 1\n",
        "    # p(x=1 y=1): 30% #chance of correct hit to total 100% of hit\n",
        "    else:\n",
        "        point[0] += 1\n",
        "        point[1] += 1\n",
        "\n",
        "    # add next point to our coordinates list\n",
        "    new_point = [point[0], point[1]]\n",
        "    coordinates.append(new_point)\n",
        "\n",
        "# print all coordinates\n",
        "print('experimantal Coordinates:')\n",
        "for c in coordinates:\n",
        "    print(c)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "experimantal Coordinates:\n",
            "[7, 7]\n",
            "[8, 7]\n",
            "[11, 9]\n",
            "[10, 10]\n",
            "[13, 11]\n",
            "[12, 12]\n",
            "[15, 13]\n",
            "[14, 12]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g2l6TtkhH5fJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "outputId": "689198c4-bbdb-4910-b10a-ba1e31c03e6c"
      },
      "source": [
        "# inputs for observed x values\n",
        "x_1 = int(input(\"x1 = \"))\n",
        "x_2 = int(input(\"x2 = \"))\n",
        "x_3 = int(input(\"x3 = \"))\n",
        "x_4 = int(input(\"x4 = \"))\n",
        "x_5 = int(input(\"x5 = \"))\n",
        "x_6 = int(input(\"x6 = \"))\n",
        "x_7 = int(input(\"x7 = \"))\n",
        "x_8 = int(input(\"x8 = \"))\n",
        "#inputs for observed y values\n",
        "y_1 = int(input(\"y1 = \"))\n",
        "y_2 = int(input(\"y2 = \"))\n",
        "y_3 = int(input(\"y3 = \"))\n",
        "y_4 = int(input(\"y4 = \"))\n",
        "y_5 = int(input(\"y5 = \"))\n",
        "y_6 = int(input(\"y6 = \"))\n",
        "y_7 = int(input(\"y7 = \"))\n",
        "y_8 = int(input(\"y8 = \"))\n",
        "\n",
        "# the error is the width of a cell (1), so can be ignored in further calculations\n",
        "# Calculations of A,B,C,D and E\n",
        "A = y_1 + y_2 + y_3 + y_4 + y_5 + y_6 + y_7 + y_8\n",
        "B = 8 # 8 times the error\n",
        "C = x_1 + x_2 + x_3 + x_4 + x_5 + x_6 + x_7 + x_8\n",
        "D = y_1**2 + y_2**2 + y_3**2 + y_4**2 + y_5**2 + y_6**2 + y_7**2 + y_8**2\n",
        "E = x_1**2 + x_2**2 + x_3**2 + x_4**2 + x_5**2 + x_6**2 + x_7**2 + x_8**2\n",
        "\n",
        "# calculation of a and b\n",
        "a = (E*B - C*A)/(D*B - A**2)\n",
        "b = (D*C - E*A)/(D*B - A**2)\n",
        "\n",
        "# calculation of chi squared\n",
        "S = ((x_1 - a*y_1 - b)**2) + ((x_2 - a*y_2 - b)**2) + ((x_3 - a*y_3 - b)**2) + ((x_4 - a*y_4 - b)**2) + ((x_5 - a*y_5 - b)**2) + ((x_6 - a*y_6 - b)**2) + ((x_7 - a*y_7 - b)**2) + ((x_8 - a*y_8 - b)**2) \n",
        "\n",
        "print (S)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x1 = 7\n",
            "x2 = 8\n",
            "x3 = 11\n",
            "x4 = 10\n",
            "x5 = 13\n",
            "x6 = 12\n",
            "x7 = 15\n",
            "x8 = 14\n",
            "y1 = 7\n",
            "y2 = 7\n",
            "y3 = 9\n",
            "y4 = 10\n",
            "y5 = 11\n",
            "y6 = 12\n",
            "y7 = 13\n",
            "y8 = 12\n",
            "358.37288135593207\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iA4CfSFzlclT",
        "colab_type": "text"
      },
      "source": [
        "Chi squared is a very large number for our track with (8,6) as origin"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cb2v2QiOkyj6",
        "colab_type": "text"
      },
      "source": [
        "BACK TO PROBABILITY:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AxROaij1Geaj",
        "colab_type": "text"
      },
      "source": [
        "Number of degrees of freedom: dr = 8 - 2 = 6\n",
        "\n",
        "8 because there are 8 detection points. We substract 2 because there are 2 spacial dimensions associated with each detection point (x and y but not z). The level of significance is chosen to be 0.05, this can be chosen by the researcher and is often 0.05. The average of chi squared values from both the 10% chance of miss hit and the 5% chance of miss hit distributions are respectively 10.88 and 6.42. The P value, using these data can then be looked up in a table or calculated by a p-value calculator.\n",
        "\n",
        "10% chance of miss hit:\n",
        "\n",
        "The P-Value is .09206. The result is not significant at p < .05.\n",
        "This test at 10% miss hit is therefore not a good enough representation of the expected data and can not be used to describe the underlying physics.\n",
        "\n",
        "5% chance of miss hit:\n",
        "\n",
        "The P-Value is .377821. The result is not significant at p < .05.\n",
        "This test at 5% miss hit is therefore not a good enough representation of the expected data and can not be used to describe the underlying physics."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hO9JWaTvj0sj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# inputs for observed x values\n",
        "x_1 = int(input(\"x1 = \"))\n",
        "x_2 = int(input(\"x2 = \"))\n",
        "x_3 = int(input(\"x3 = \"))\n",
        "x_4 = int(input(\"x4 = \"))\n",
        "x_5 = int(input(\"x5 = \"))\n",
        "x_6 = int(input(\"x6 = \"))\n",
        "x_7 = int(input(\"x7 = \"))\n",
        "x_8 = int(input(\"x8 = \"))\n",
        "#inputs for observed y values\n",
        "y_1 = int(input(\"y1 = \"))\n",
        "y_2 = int(input(\"y2 = \"))\n",
        "y_3 = int(input(\"y3 = \"))\n",
        "y_4 = int(input(\"y4 = \"))\n",
        "y_5 = int(input(\"y5 = \"))\n",
        "y_6 = int(input(\"y6 = \"))\n",
        "y_7 = int(input(\"y7 = \"))\n",
        "y_8 = int(input(\"y8 = \"))\n",
        "\n",
        "# the error is the width of a cell (1), so can be ignored in further calculations\n",
        "# Calculations of A,B,C,D and E\n",
        "A = y_1 + y_2 + y_3 + y_4 + y_5 + y_6 + y_7 + y_8\n",
        "B = 8 # 8 times the error\n",
        "C = x_1 + x_2 + x_3 + x_4 + x_5 + x_6 + x_7 + x_8\n",
        "D = y_1**2 + y_2**2 + y_3**2 + y_4**2 + y_5**2 + y_6**2 + y_7**2 + y_8**2\n",
        "E = x_1**2 + x_2**2 + x_3**2 + x_4**2 + x_5**2 + x_6**2 + x_7**2 + x_8**2\n",
        "\n",
        "# calculation of a and b\n",
        "a = (E*B - C*A)/(D*B - A**2)\n",
        "b = (D*C - E*A)/(D*B - A**2)\n",
        "\n",
        "# calculation of chi squared\n",
        "S = ((x_1 - a*y_1 - b)**2) + ((x_2 - a*y_2 - b)**2) + ((x_3 - a*y_3 - b)**2) + ((x_4 - a*y_4 - b)**2) + ((x_5 - a*y_5 - b)**2) + ((x_6 - a*y_6 - b)**2) + ((x_7 - a*y_7 - b)**2) + ((x_8 - a*y_8 - b)**2) \n",
        "\n",
        "# deviding this number by the degrees of freedom gives:\n",
        "S_deg = S/6\n",
        "\n",
        "print(S_deg)"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}